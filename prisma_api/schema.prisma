generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  published Boolean  @default(false)
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  userId Int     @unique
  user   User    @relation(fields: [userId], references: [id])
}

model User {
  id             Int              @id @default(autoincrement())
  email          String           @unique
  name           String
  password       String
  changekey      ChangeKey[]
  posts          Post[]
  profile        Profile?
  roleId         Int
  role           Rol              @relation(fields: [roleId], references: [idRol])
  languageid     Int
  language       Language         @relation(fields: [languageid], references: [idLanguage])
  tournament     Tournament[]
  resolution     Resolution[]
  tournamentUser TournamentUser[]
  userCode       UserCode[]
}

model UserCode {
  idUserCode Int    @id @default(autoincrement())
  code       String
  name       String

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model ChangeKey {
  idChangeKey Int      @id @default(autoincrement())
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?
  date        DateTime @default(now())
  token       String
  condtion    Int
}

model Rol {
  idRol Int    @id @default(autoincrement())
  rol   String
  user  User[]
}

model Language {
  idLanguage Int    @id @default(autoincrement())
  language   String
  user       User[]
}

model Tournament {
  idTournament      Int                 @id @default(autoincrement())
  name              String
  description       String
  startDate         DateTime
  endDate           DateTime
  stateTournamentId Int
  stateTournament   StateTournament     @relation(fields: [stateTournamentId], references: [idState])
  typeTournamentId  Int
  typeTournament    TypeTournament      @relation(fields: [typeTournamentId], references: [idType])
  tournamentProblem TournamentProblem[]
  tournamentUser    TournamentUser[]
  user              User?               @relation(fields: [userId], references: [id])
  userId            Int?
  resolution        Resolution[]
}

model StateTournament {
  idState    Int          @id @default(autoincrement())
  State      String
  tournament Tournament[]
}

model TypeTournament {
  idType     Int          @id @default(autoincrement())
  Type       String
  tournament Tournament[]
}

model Problem {
  idProblem         Int                 @id @default(autoincrement())
  name              String
  archive           String?
  statement         String
  complexityId      Int
  complexity        Complexity          @relation(fields: [complexityId], references: [idComplexity])
  maxExecutionTime  Float
  tournamentProblem TournamentProblem[]
  resolution        Resolution[]
  solution          Solution[]
  problemHashtab    ProblemHashtag[]
}

model Complexity {
  idComplexity Int       @id @default(autoincrement())
  complexity   String
  problem      Problem[]
}

model TournamentProblem {
  idTournamentProblem    Int        @id @default(autoincrement())
  tournament             Tournament @relation(fields: [tournamentIdTournament], references: [idTournament])
  tournamentIdTournament Int
  problem                Problem    @relation(fields: [problemIdProblem], references: [idProblem])
  problemIdProblem       Int
  order                  Int
}

model StateSolution {
  idState    Int          @id @default(autoincrement())
  State      String
  resolution Resolution[]
}

model TournamentUser {
  idTournamentUser       Int        @id @default(autoincrement())
  // tournament one to many
  tournament             Tournament @relation(fields: [tournamentIdTournament], references: [idTournament])
  tournamentIdTournament Int
  // order Int
  point                  Int        @default(0)
  time                   BigInt     @default(0)
  token                  String
  // user one to many
  user                   User?      @relation(fields: [userId], references: [id])
  userId                 Int?
}

model Label {
  idLabel Int    @id @default(autoincrement())
  label   String
}

model Resolution {
  idResolution           Int            @id @default(autoincrement())
  user                   User?          @relation(fields: [userId], references: [id])
  userId                 Int?
  //Many to one
  problem                Problem?       @relation(fields: [problemIdProblem], references: [idProblem])
  problemIdProblem       Int?
  //Many to one
  solution               Solution?      @relation(fields: [solutionIdSolution], references: [idSolution])
  solutionIdSolution     Int?
  //Many to one
  tournament             Tournament?    @relation(fields: [tournamentIdTournament], references: [idTournament])
  tournamentIdTournament Int?
  token                  String         @unique
  applicationDate        String
  responseDate           String?
  reply                  String?
  //Many to one
  stateSolution          StateSolution? @relation(fields: [stateSolutionIdState], references: [idState])
  stateSolutionIdState   Int?
}

model Solution {
  idSolution       Int          @id @default(autoincrement())
  // Many to One
  problem          Problem?     @relation(fields: [problemIdProblem], references: [idProblem])
  problemIdProblem Int?
  inputParameter   String
  exit             String
  resolution       Resolution[]
}

model Hashtag {
  idHashtag      Int              @id @default(autoincrement())
  hashtag        String
  problemHashtab ProblemHashtag[]
}

model ProblemHashtag {
  idProblemHashtab Int     @id @default(autoincrement())
  hashtag          Hashtag @relation(fields: [hashtagIdHashtag], references: [idHashtag])
  hashtagIdHashtag Int
  Problem          Problem @relation(fields: [problemIdProblem], references: [idProblem])
  problemIdProblem Int
}
