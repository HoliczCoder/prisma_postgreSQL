generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  published Boolean  @default(false)
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  userId Int     @unique
  user   User    @relation(fields: [userId], references: [id])
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  name       String
  password   String
  posts      Post[]
  profile    Profile?
  roleId     Int
  role       Rol      @relation(fields: [roleId], references: [idRol])
  languageid Int
  language   Language @relation(fields: [languageid], references: [idLanguage])
}

model CambioClave {
  idCambio Int @id @default(autoincrement())
  status   Int
}

model Rol {
  idRol Int    @id @default(autoincrement())
  rol   String
  user  User[]
}

model Language {
  idLanguage Int    @id @default(autoincrement())
  language   String
  user       User[]
}

model Tournament {
  idTournament      Int             @id @default(autoincrement())
  name              String
  description       String
  startDate         DateTime
  endDate           DateTime
  stateTournamentId Int
  stateTournament   StateTournament @relation(fields: [stateTournamentId], references: [idState])
  typeTournamentId  Int
  typeTournament    TypeTournament  @relation(fields: [typeTournamentId], references: [idType])
}

model StateTournament {
  idState    Int          @id @default(autoincrement())
  State      String
  tournament Tournament[]
}

model TypeTournament {
  idType     Int          @id @default(autoincrement())
  Type       String
  tournament Tournament[]
}

// model Creator {
//   id Int @id @default(autoincrement())
  
// }